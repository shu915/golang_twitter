// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, token)
VALUES ($1, $2, $3)
RETURNING id, email, password, token, is_active, created_at
`

type CreateUserParams struct {
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Token    pgtype.Text `json:"token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password, arg.Token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Token,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, token, is_active, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Token,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT id, email, password, token, is_active, created_at FROM users WHERE token = $1
`

func (q *Queries) GetUserByToken(ctx context.Context, token pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Token,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserIsActive = `-- name: UpdateUserIsActive :exec
UPDATE users SET is_active = $1 WHERE token = $2
`

type UpdateUserIsActiveParams struct {
	IsActive pgtype.Bool `json:"is_active"`
	Token    pgtype.Text `json:"token"`
}

func (q *Queries) UpdateUserIsActive(ctx context.Context, arg UpdateUserIsActiveParams) error {
	_, err := q.db.Exec(ctx, updateUserIsActive, arg.IsActive, arg.Token)
	return err
}
